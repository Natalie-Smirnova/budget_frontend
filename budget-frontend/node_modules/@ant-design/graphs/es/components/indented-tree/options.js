import { idOf } from '@antv/g6';
import React from 'react';
import { CollapseExpandIcon, RCNode } from '../../core/base';
import { measureTextSize } from '../../core/utils/measure-text';
import { getNodeSide } from '../../core/utils/node';
import { getBoxedTextNodeStyle, getLinearTextNodeStyle } from '../../core/utils/tree';
const { ArrowCountIcon } = CollapseExpandIcon;
const { TextNode } = RCNode;
export const DEFAULT_OPTIONS = {
    node: {
        type: 'react',
        style: {
            component: (data) => React.createElement(TextNode, { type: "filled", text: idOf(data) }),
            size: (data) => measureTextSize(idOf(data), [24, 16]),
        },
        state: {
            active: {
                halo: false,
            },
            selected: {
                halo: false,
            },
        },
    },
    edge: {
        type: 'indented',
        style: {
            lineWidth: 3,
        },
    },
    transforms: (prev) => [
        ...prev,
        {
            type: 'collapse-expand-react-node',
            key: 'collapse-expand-react-node',
            enable: false,
            trigger: 'icon',
            iconRender: function (isCollapsed, data) {
                return React.createElement(ArrowCountIcon, { graph: this, data: data, isCollapsed: isCollapsed });
            },
        },
    ],
    layout: {
        type: 'indented',
        direction: 'LR',
        indent: (node) => getIndent(node, 20),
        getWidth: (data) => measureTextSize(idOf(data), [24, 16])[0],
        getHeight: (data) => measureTextSize(idOf(data), [24, 16])[1],
        getVGap: () => 14,
    },
    animation: {
        duration: 500,
    },
};
const getIndent = (node, preset) => {
    if (node.depth === 0)
        return 0;
    let totalWidth = preset;
    let currentNode = node.parent;
    while (currentNode) {
        totalWidth += currentNode.width / 2;
        currentNode = currentNode.parent;
    }
    return totalWidth / node.depth;
};
const getNodeTextAlign = (graph, data) => {
    const side = getNodeSide(graph, data);
    return side === 'left' ? 'right' : side === 'center' ? 'center' : 'left';
};
export const getIndentedTreeOptions = ({ type, nodeMinWidth, nodeMaxWidth, direction, }) => {
    let options = {};
    const minWidth = nodeMinWidth || 0;
    const maxWidth = nodeMaxWidth || 300;
    if (type === 'boxed') {
        options = {
            node: {
                style: {
                    component: function (data) {
                        const depth = data.depth;
                        const color = data.style?.color;
                        const props = {
                            type: depth === 0 || depth === 1 ? 'filled' : 'outlined',
                            text: idOf(data),
                            color: depth === 0 ? '#f1f4f5' : color,
                            maxWidth,
                            font: getBoxedTextNodeStyle(idOf(data), minWidth, maxWidth, depth).font,
                            style: {
                                textAlign: getNodeTextAlign(this, data),
                                ...(depth === 0 ? { color: '#252525' } : {}),
                            },
                        };
                        return React.createElement(TextNode, { ...props });
                    },
                    size: (data) => getBoxedTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size,
                },
            },
            edge: {
                style: {
                    stroke: function (data) {
                        return this.getNodeData(data.source).style.color || '#99ADD1';
                    },
                    radius: 16,
                },
            },
            transforms: (prev) => [
                ...prev,
                {
                    type: 'assign-color-by-branch',
                    key: 'assign-color-by-branch',
                },
            ],
            layout: {
                type: 'indented',
                indent: (node) => getIndent(node, 20),
                getWidth: (data) => getBoxedTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size[0],
                getHeight: (data) => getBoxedTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size[1],
                getVGap: () => 14,
            },
        };
    }
    else if (type === 'linear') {
        options = {
            node: {
                style: {
                    component: function (data) {
                        const depth = data.depth;
                        const color = data.style?.color;
                        const props = {
                            text: idOf(data),
                            color,
                            maxWidth,
                            font: getLinearTextNodeStyle(idOf(data), minWidth, maxWidth, depth).font,
                        };
                        Object.assign(props, depth === 0
                            ? { type: 'filled', color: '#f1f4f5', style: { color: '#252525' } }
                            : {
                                type: 'underlined',
                                style: { textAlign: getNodeTextAlign(this, data) },
                            });
                        return React.createElement(TextNode, { ...props });
                    },
                    size: (data) => getLinearTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size,
                    ports: function (data) {
                        const side = getNodeSide(this, data);
                        return side === 'left'
                            ? [{ placement: 'bottom' }, { placement: 'bottom-right' }]
                            : side === 'center'
                                ? [{ placement: 'bottom' }]
                                : [{ placement: 'bottom' }, { placement: 'bottom-left' }];
                    },
                },
            },
            edge: {
                style: {
                    stroke: function (data) {
                        return this.getNodeData(data.target).style.color || '#99ADD1';
                    },
                    radius: 24,
                },
            },
            layout: {
                type: 'indented',
                indent: (node) => getIndent(node, 20),
                getWidth: (data) => getLinearTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size[0],
                getHeight: (data) => getLinearTextNodeStyle(idOf(data), minWidth, maxWidth, data.depth).size[1],
                getVGap: () => 12,
            },
            transforms: (prev) => [
                ...prev,
                {
                    type: 'assign-color-by-branch',
                    key: 'assign-color-by-branch',
                },
                {
                    type: 'arrange-edge-z-index',
                    key: 'arrange-edge-z-index',
                },
            ],
        };
    }
    if (direction) {
        options.layout ||= {};
        Object.assign(options.layout, {
            direction: direction === 'alternate' ? 'H' : direction === 'left' ? 'RL' : 'LR',
        });
    }
    return options;
};
